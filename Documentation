---------------------------------------------------------------------------------------------------------
DOCUMENTATION
---------------------------------------------------------------------------------------------------------

User Manual:
Start of game:
- Choose new game and select number of players
- The info section is on the right, and you can skip/return from certain phases there.
- Note that the middle east is gone, that is okay there just isn't anything there.
Game phase:
- First place armies on countries. The countries you can place are white, and the number of armies is in the info section.
- Can then attack. Choose the country you want to attack from and then number of armies, and then country you want to attack. The countries you can select are in white.
- For the final phase of your turn you can move armies from one to the next.
End of game
- Player loses game when they have no more countries left
- When there is only one player left then that player wins the game.

Decisions made:
- We decided to make the map editor now because creating the map using hard coded values would have taken a while, so the time required becomes less.
- Have multiple controllers for different phases to try and not make the main controller to bloated.
- We used the polygon class for drawing countries because it came with a built in drawing method in JPanel and a built in contains point method for determining if user clicked in country.

Descriptions of Data Structures/Interfaces:
- Game model
  - Players is an arraylist, and then the current player is an int. This works well for choosing the next player.
  - Continents and countries are a hashmap because of the ease of getting the object when all you have is the name of the country, which happens when loading from json often.
- Observables
  - GameAcitonListener: Used for adding countries/continents on the editor. Will explain in correct milestone.
  - GameModelListener: Has update function which is called whenever the game model is updated. Having just the one method makes it easier to code and there are no visible performance bottlenecks.
